#!/bin/bash

action=""
trackid=0
xinfo=0

# functions
next()            { osascript -e 'tell application "Music" to next track'; }
previous()        { osascript -e 'tell application "Music" to previous track'; }
love()            { osascript -e 'tell application "Music" to set loved of current track to true'; }
move()            { osascript -e 'tell application "Music" to set player position to (player position + 10)'; }
replay()          { osascript -e 'tell application "Music" to set player position to (player position - 700 )'; }
artist()          { artistv=$(osascript -e 'tell application "Music" to get artist of current track'); }
track()           { trackv=$(osascript -e 'tell application "Music" to get name of current track'); }
position()        { positionv=$(osascript -e 'tell application "Music" to player position' | awk '{ n = split($0,part,"."); print part[1]" sec" }'); }
duration()        { timev=$(osascript -e 'tell application "Music" to get time of current track'); }
state()           { statev=$(osascript -e 'tell application "Music" to player state as string'); }
properties()      { propertiesv=$(osascript -e 'tell application "Music" to get properties of current track'); }
getshufflestate() { shufflev=$(osascript -e 'tell application "Music" to shuffle enabled' 2>> /dev/null); }
getvolume()       { volumev=$(osascript -e 'tell application "Music" to sound volume as integer'); }
chvolume()        {
	vol=$(osascript -e 'tell application "Music" to sound volume as integer')
	if [ "${1}" == "down" ] ; then
		newvol=$((vol-10))
	elif [ "${1}" == "up" ] ; then
		newvol=$((vol+10))
	fi
	osascript -e 'tell application "Music" to set sound volume to "'$newvol'"';
	getvolume
}

# more osascript and iTunes / Music:
# https://alvinalexander.com/apple/itunes-applescript-examples-scripts-mac-reference/

nicetime()        {
	secs=${1}

	h=$(( secs / 3600 ))
	m=$(( ( secs / 60 ) % 60 ))
	s=$(( secs % 60 ))

	if [ ${h} -eq 0 ] ; then
		if [ ${m} -le 9 ] ; then
			nicetimev=$(printf "%1d:%02d " $m $s)
		else
			nicetimev=$(printf "%02d:%02d " $m $s)
		fi
	else 
		nicetimev=$(printf "%02d:%02d:%02d " $h $m $s)
	fi
}

shuffle()         {
	shuffleState=$(nice -n20 osascript -e 'tell application "Music" to shuffle enabled' 2>> /dev/null);
	if ${shuffleState} ; then
		osascript -e 'tell application "Music" to set shuffle enabled to false';
	else
		osascript -e 'tell application "Music" to set shuffle enabled to true';
	fi
}

playpause()       { osascript -e 'tell application "Music" to playpause'; }

getloved()       {
	loved=$(nice -n20 osascript -e 'tell application "Music" to loved of current track');
	disliked=$(nice -n20 osascript -e 'tell application "Music" to disliked of current track');

	if ${loved} ; then
		rating="love this"
	elif ${disliked} ; then
		rating="dislike this"
	else
		rating="just a song"
	fi
}


info()            {
	if [ "$3" == "" ] ; then
		input="non"
	else
		input=$3
		getvolume
		state
		duration
	fi

	properties
	trackid=$(echo ${propertiesv} | awk -F', ' '{print $2}' | head -1 | cut -f2 -d":")

	same=0
	if [ ${trackid} -eq $1 ] ; then
		same=1
	fi

	position
	getshufflestate
	getloved

	artist_line=$(echo ${propertiesv} | awk -F', ' '{print $11}' | sed 's/:/ : /g')
	song_line=$(echo ${propertiesv} | awk -F', ' '{print $4}' | sed 's/:/ : /g')
	album_line=$(echo ${propertiesv} | awk -F', ' '{print $14}' | sed 's/:/ : /g')
	duration_line=$(echo ${propertiesv} | awk -F', ' '{print $9}' | cut -d":" -f2-)
	iamat=$(echo ${timev}":"${positionv} | awk -F":" '{print ( ($1 * 60) + $2 ) }')
	nicetime ${positionv}

	if [ "${statev}" == "playing" ] ; then
		clear
		redraw
	fi

	tput cup 20 0 
	tput setaf 2
	echo -n "l/n/s/p/q > "
	tput sgr0
}

redraw () {
	echo ${artist_line}
	echo ${song_line}
	echo ${album_line}
	echo ${nicetimev}"van "${duration_line}

	echo "player is : ${statev} volume : ${volumev}/100"
	echo "shuffle is: ${shufflev}"
	echo "trackid: " ${trackid}" dezelfde: "${same}
	echo "loved : ${rating}"
	echo "/===================\\"
	echo "| l for love        |"
	echo "| n/N for next/prev |"
	echo "| s for (un)shuffle |"
	echo "| p for play pause  |"
	echo "| q to quit         |"
	echo "| +/- for volume    |"
	echo "| r to replay       |"
	echo "| x for info        |"
	echo "\\===================/"
	intime $(echo ${positionv} | cut -f1 -d" ") ${iamat} 21
	if [ ${xinfo} -eq 1 ] ; then
		echo ${propertiesv}
	fi
}

intime() {
	probar=$(echo 'scale=2;'"($1 / $2) * $3" | bc)
	rest=$( echo "$3 - $probar" | bc)
	probar=$(echo "$probar" | cut -f1 -d".")
	rest=$(echo "$rest" | cut -f1 -d".")

	if [ "${probar}" == "" ] ; then
		probar=0
	fi

	if [ ${rest} -gt 19 ] ; then
		rest=19
	fi

	if [ ${probar} -ge 0 ] ; then
		progressbar "${probar}" "${rest}"
	else
		progressbar 0 20
	fi
}

progressbar() {
	size=$2
	tput setaf 3
	tput setab 2

	if [ $1 -ge 1 ] ; then
		printf "%$1s" " "
	else
		((size=size+1))
	fi

	tput sgr0
	tput setab 3
	tput blink
	printf ">"
	tput sgr0
	tput setab 1
	printf "%${size}s" " "
	tput sgr0
	printf "\n"
}

info ${trackid} " " S
while [ "${action}" = "" ] ; do
	read -t 2 -n 1 action
	case $action in
		l)
			love
			;;
		n)
			next
			;;
		N)
			previous
			;;
		q)
			exit
			;;
		r)
			replay &
			;;
		s)
			shuffle
			;;
		p)
			playpause
			;;
		"-")
			chvolume down
			;;
		"+")
			chvolume up
			;;
		x)
			if [ ${xinfo} -eq 1 ] ; then
				xinfo=0
			else
				xinfo=1
			fi
			;;
		*)
			;;
	esac

	if [ "$action" != "" ] ; then
		lastaction=$action
	fi
	info ${trackid} ${lastaction} ${action}
	action=""
done
